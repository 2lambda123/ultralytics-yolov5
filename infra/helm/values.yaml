# image details
image:
  repository: 748276930737.dkr.ecr.ap-south-1.amazonaws.com/prod-lossrun-ca-model
  pullPolicy: IfNotPresent
  tag: "0.0.1-44b176e"
imagePullSecrets: []

# Pod discovery and networking
podLabels:
  lifecycle: Ec2OnDemand
  podType: model
service:
  type: ClusterIP
  targetPort: 5000
ingress:
  enabled: true
  className: alb
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "20"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "4"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/ip-address-type: ipv4
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/scheme: internal
    alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=600
  path: /lossrun-ca-model
  pathType: Prefix
podAnnotations: {}

# Security and env variables
serviceAccountName: lossrun-sa
configMap:
  - lossrun-ca-model
secrets: []
podSecurityContext: {}
securityContext: {}

# Container discovery
# default path: GET /health and port: service port
livenessProbe:
  path: ""
  port: 0
readinessProbe:
  path: ""
  port: 0
probe:
  initialDelaySeconds: 10
  periodSeconds: 30
  failureThreshold: 4
  timeoutSeconds: 25
  successThreshold: 1
  terminationGracePeriodSeconds: 60

# scaling
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nameOverride: ""
fullnameOverride: ""
